/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace DealController {
  export type DealStruct = {
    id: PromiseOrValue<BigNumberish>;
    orgId: PromiseOrValue<BigNumberish>;
    oneOffPayment: PromiseOrValue<BigNumberish>;
    noOfNFTs: PromiseOrValue<BigNumberish>;
    counterParty: PromiseOrValue<string>;
    orgRoyaltyReceiver: PromiseOrValue<string>;
    done: PromiseOrValue<boolean>;
    cancelled: PromiseOrValue<boolean>;
  };

  export type DealStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    boolean
  ] & {
    id: BigNumber;
    orgId: BigNumber;
    oneOffPayment: BigNumber;
    noOfNFTs: BigNumber;
    counterParty: string;
    orgRoyaltyReceiver: string;
    done: boolean;
    cancelled: boolean;
  };

  export type NFTStruct = {
    id: PromiseOrValue<BigNumberish>;
    dealId: PromiseOrValue<BigNumberish>;
    nftCID: PromiseOrValue<string>;
    royaltyBasisPoints: PromiseOrValue<BigNumberish>;
    orgRoyaltyBasisPoints: PromiseOrValue<BigNumberish>;
    royaltySplitter: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    created: PromiseOrValue<boolean>;
  };

  export type NFTStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    boolean
  ] & {
    id: BigNumber;
    dealId: BigNumber;
    nftCID: string;
    royaltyBasisPoints: BigNumber;
    orgRoyaltyBasisPoints: BigNumber;
    royaltySplitter: string;
    tokenId: BigNumber;
    created: boolean;
  };
}

export interface DealControllerInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "SIGNER_ROLE()": FunctionFragment;
    "acceptDeal(uint256,address)": FunctionFragment;
    "cancelDeal(uint256)": FunctionFragment;
    "createDeal(uint256,uint256,uint96,uint96,address,address,string,uint256,bytes)": FunctionFragment;
    "dealExists(uint256)": FunctionFragment;
    "deals(uint256)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "feeRoyaltyBasisPoints()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "nfts(uint256)": FunctionFragment;
    "nftsInDeal(uint256,uint256)": FunctionFragment;
    "oneOffFeeBasisPoints()": FunctionFragment;
    "orgIdOf(address)": FunctionFragment;
    "organizationController()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setFeeRoyaltyBasisPoints(uint96)": FunctionFragment;
    "setOneOffFeeBasisPoints(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalDeals()": FunctionFragment;
    "totalNFTs()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "PAUSER_ROLE"
      | "SIGNER_ROLE"
      | "acceptDeal"
      | "cancelDeal"
      | "createDeal"
      | "dealExists"
      | "deals"
      | "feeCollector"
      | "feeRoyaltyBasisPoints"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "nfts"
      | "nftsInDeal"
      | "oneOffFeeBasisPoints"
      | "orgIdOf"
      | "organizationController"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setFeeCollector"
      | "setFeeRoyaltyBasisPoints"
      | "setOneOffFeeBasisPoints"
      | "supportsInterface"
      | "totalDeals"
      | "totalNFTs"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptDeal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDeal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createDeal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dealExists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRoyaltyBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nfts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftsInDeal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "oneOffFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orgIdOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRoyaltyBasisPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOneOffFeeBasisPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalNFTs", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptDeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelDeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createDeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dealExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRoyaltyBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftsInDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oneOffFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orgIdOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "organizationController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRoyaltyBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOneOffFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDeals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalNFTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "DealCancelled(uint256,uint256,address)": EventFragment;
    "DealCompleted(uint256,uint256,address,uint256[],uint256[],address[])": EventFragment;
    "DealCreated(tuple,tuple[])": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DealCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface DealCancelledEventObject {
  dealId: BigNumber;
  organizationId: BigNumber;
  counterParty: string;
}
export type DealCancelledEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  DealCancelledEventObject
>;

export type DealCancelledEventFilter = TypedEventFilter<DealCancelledEvent>;

export interface DealCompletedEventObject {
  dealId: BigNumber;
  organizationId: BigNumber;
  counterParty: string;
  nftIds: BigNumber[];
  tokenIds: BigNumber[];
  royaltyReceivers: string[];
}
export type DealCompletedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber[], BigNumber[], string[]],
  DealCompletedEventObject
>;

export type DealCompletedEventFilter = TypedEventFilter<DealCompletedEvent>;

export interface DealCreatedEventObject {
  deal: DealController.DealStructOutput;
  nfts: DealController.NFTStructOutput[];
}
export type DealCreatedEvent = TypedEvent<
  [DealController.DealStructOutput, DealController.NFTStructOutput[]],
  DealCreatedEventObject
>;

export type DealCreatedEventFilter = TypedEventFilter<DealCreatedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface DealController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DealControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptDeal(
      dealId: PromiseOrValue<BigNumberish>,
      royaltyReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDeal(
      orgId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      orgRoyaltyBasisPoints: PromiseOrValue<BigNumberish>,
      counterParty: PromiseOrValue<string>,
      orgRoyaltyReceiver: PromiseOrValue<string>,
      nftCID: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dealExists(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean
      ] & {
        id: BigNumber;
        orgId: BigNumber;
        oneOffPayment: BigNumber;
        noOfNFTs: BigNumber;
        counterParty: string;
        orgRoyaltyReceiver: string;
        done: boolean;
        cancelled: boolean;
      }
    >;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    feeRoyaltyBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        dealId: BigNumber;
        nftCID: string;
        royaltyBasisPoints: BigNumber;
        orgRoyaltyBasisPoints: BigNumber;
        royaltySplitter: string;
        tokenId: BigNumber;
        created: boolean;
      }
    >;

    nftsInDeal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oneOffFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    orgIdOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    organizationController(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeRoyaltyBasisPoints(
      _feeRoyaltyBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOneOffFeeBasisPoints(
      _oneOffFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalDeals(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalNFTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  SIGNER_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptDeal(
    dealId: PromiseOrValue<BigNumberish>,
    royaltyReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelDeal(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDeal(
    orgId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    royaltyBasisPoints: PromiseOrValue<BigNumberish>,
    orgRoyaltyBasisPoints: PromiseOrValue<BigNumberish>,
    counterParty: PromiseOrValue<string>,
    orgRoyaltyReceiver: PromiseOrValue<string>,
    nftCID: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dealExists(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      boolean
    ] & {
      id: BigNumber;
      orgId: BigNumber;
      oneOffPayment: BigNumber;
      noOfNFTs: BigNumber;
      counterParty: string;
      orgRoyaltyReceiver: string;
      done: boolean;
      cancelled: boolean;
    }
  >;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  feeRoyaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nfts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      boolean
    ] & {
      id: BigNumber;
      dealId: BigNumber;
      nftCID: string;
      royaltyBasisPoints: BigNumber;
      orgRoyaltyBasisPoints: BigNumber;
      royaltySplitter: string;
      tokenId: BigNumber;
      created: boolean;
    }
  >;

  nftsInDeal(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oneOffFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  orgIdOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  organizationController(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeRoyaltyBasisPoints(
    _feeRoyaltyBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOneOffFeeBasisPoints(
    _oneOffFeeBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalDeals(overrides?: CallOverrides): Promise<BigNumber>;

  totalNFTs(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptDeal(
      dealId: PromiseOrValue<BigNumberish>,
      royaltyReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createDeal(
      orgId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      orgRoyaltyBasisPoints: PromiseOrValue<BigNumberish>,
      counterParty: PromiseOrValue<string>,
      orgRoyaltyReceiver: PromiseOrValue<string>,
      nftCID: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dealExists(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean
      ] & {
        id: BigNumber;
        orgId: BigNumber;
        oneOffPayment: BigNumber;
        noOfNFTs: BigNumber;
        counterParty: string;
        orgRoyaltyReceiver: string;
        done: boolean;
        cancelled: boolean;
      }
    >;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    feeRoyaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        dealId: BigNumber;
        nftCID: string;
        royaltyBasisPoints: BigNumber;
        orgRoyaltyBasisPoints: BigNumber;
        royaltySplitter: string;
        tokenId: BigNumber;
        created: boolean;
      }
    >;

    nftsInDeal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneOffFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    orgIdOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organizationController(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRoyaltyBasisPoints(
      _feeRoyaltyBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOneOffFeeBasisPoints(
      _oneOffFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalDeals(overrides?: CallOverrides): Promise<BigNumber>;

    totalNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DealCancelled(uint256,uint256,address)"(
      dealId?: PromiseOrValue<BigNumberish> | null,
      organizationId?: PromiseOrValue<BigNumberish> | null,
      counterParty?: PromiseOrValue<string> | null
    ): DealCancelledEventFilter;
    DealCancelled(
      dealId?: PromiseOrValue<BigNumberish> | null,
      organizationId?: PromiseOrValue<BigNumberish> | null,
      counterParty?: PromiseOrValue<string> | null
    ): DealCancelledEventFilter;

    "DealCompleted(uint256,uint256,address,uint256[],uint256[],address[])"(
      dealId?: PromiseOrValue<BigNumberish> | null,
      organizationId?: PromiseOrValue<BigNumberish> | null,
      counterParty?: PromiseOrValue<string> | null,
      nftIds?: null,
      tokenIds?: null,
      royaltyReceivers?: null
    ): DealCompletedEventFilter;
    DealCompleted(
      dealId?: PromiseOrValue<BigNumberish> | null,
      organizationId?: PromiseOrValue<BigNumberish> | null,
      counterParty?: PromiseOrValue<string> | null,
      nftIds?: null,
      tokenIds?: null,
      royaltyReceivers?: null
    ): DealCompletedEventFilter;

    "DealCreated(tuple,tuple[])"(
      deal?: null,
      nfts?: null
    ): DealCreatedEventFilter;
    DealCreated(deal?: null, nfts?: null): DealCreatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptDeal(
      dealId: PromiseOrValue<BigNumberish>,
      royaltyReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDeal(
      orgId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      orgRoyaltyBasisPoints: PromiseOrValue<BigNumberish>,
      counterParty: PromiseOrValue<string>,
      orgRoyaltyReceiver: PromiseOrValue<string>,
      nftCID: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dealExists(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    feeRoyaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftsInDeal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneOffFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    orgIdOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organizationController(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeRoyaltyBasisPoints(
      _feeRoyaltyBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOneOffFeeBasisPoints(
      _oneOffFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDeals(overrides?: CallOverrides): Promise<BigNumber>;

    totalNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIGNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptDeal(
      dealId: PromiseOrValue<BigNumberish>,
      royaltyReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelDeal(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDeal(
      orgId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      orgRoyaltyBasisPoints: PromiseOrValue<BigNumberish>,
      counterParty: PromiseOrValue<string>,
      orgRoyaltyReceiver: PromiseOrValue<string>,
      nftCID: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dealExists(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRoyaltyBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftsInDeal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneOffFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orgIdOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    organizationController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRoyaltyBasisPoints(
      _feeRoyaltyBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOneOffFeeBasisPoints(
      _oneOffFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDeals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
