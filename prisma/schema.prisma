// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                Int     @id @default(autoincrement())
  admin             String  @unique
  name              String?
  imageCID          String?
  nonce             String
  description       String? @db.LongText
  video             String?
  email             String?
  locked            Boolean @default(false)
  nftContract       String? @unique
  lockedBlockNumber Int?
  registered        Boolean @default(false)

  adminChanges OrganizationAdminChange[]
  deals        Deal[]
  Message      Message[]
}

model OrganizationAdminChange {
  blockNumber Int
  logIndex    Int
  oldAdmin    String
  newAdmin    String
  orgId       Int

  org Organization @relation(fields: [orgId], references: [id])

  @@id([blockNumber, logIndex])
}

model Celeb {
  id         Int       @id @default(autoincrement())
  address    String    @unique
  nonce      String
  name       String?
  imageCID   String?
  dob        DateTime?
  email      String?
  bio        String?   @db.LongText
  verified   Boolean   @default(false)
  registered Boolean   @default(false)

  deals   Deal[]
  Message Message[]
}

model NFTAttribute {
  metadataCID  String
  trait_type   String
  value        String
  display_type String?

  metadata NFTMetadata @relation(fields: [metadataCID], references: [cid])

  @@id([metadataCID, trait_type])
}

model NFTMetadata {
  cid           String  @id
  image         String
  name          String
  description   String
  animationURL  String?
  external_url  String?
  animation_url String?

  attributes NFTAttribute[]
  nfts       Nft[]
}

model Deal {
  id                Int     @id
  celebAddress      String
  oneOffFees        String
  orgId             Int
  orgRoyaltyReceier String
  done              Boolean @default(false)
  cancelled         Boolean @default(false)

  org   Organization @relation(fields: [orgId], references: [id])
  celeb Celeb        @relation(fields: [celebAddress], references: [address])

  nfts    Nft[]
  Message Message[]
}

model Nft {
  id                    Int     @id
  tokenId               Int?    @unique
  dealId                Int
  cid                   String
  royaltyBasisPoints    Int
  orgRoyaltyBasisPoints Int
  totalSupply           Int     @default(0)
  royaltySplitter       String?
  created               Boolean @default(false)

  metadata NFTMetadata @relation(fields: [cid], references: [cid])
  deal     Deal        @relation(fields: [dealId], references: [id])

  transfers NFTTranfer[]
}

enum BlockchainSyncTypes {
  DealCreated
  DealCompleted
  DealCancelled
  NFTSingleTransfer
  NFTBatchTransfer
  OrganizationCreated
  OrganizationLocked
  OrganizationAdminChanged
}

model BlockchainSync {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  type             BlockchainSyncTypes

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

enum TransferType {
  Single
  Batch
}

model NFTTranfer {
  tokenId          Int
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  from             String
  to               String
  value            Int
  type             TransferType

  nft Nft @relation(fields: [tokenId], references: [tokenId])

  @@id([tokenId, blockNumber, logIndex, type])
}

enum MessageType {
  IMAGE
  VIDEO
  DEAL
  TEXT
}

enum SenderType {
  ORG
  CELEB
}

model Message {
  id        Int         @id @default(autoincrement())
  orgId     Int
  celebId   Int
  unread    Boolean     @default(true)
  type      MessageType
  sender    SenderType
  text      String?     @db.LongText
  imageCID  String?
  videoCID  String?
  dealId    Int?        @unique
  createdAt DateTime    @default(now())

  org   Organization @relation(fields: [orgId], references: [id])
  celeb Celeb        @relation(fields: [celebId], references: [id])
  deal  Deal?        @relation(fields: [dealId], references: [id])
}
